import http.server
import socketserver
from urllib.parse import urlparse
from urllib.parse import parse_qs
import glob

class MyHttpRequestHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        # Sending an '200 OK' response
        self.send_response(200)

        # Setting the header
        self.send_header("Content-type", "text/html")

        # Whenever using 'send_header', you also have to call 'end_headers'
        self.end_headers()

        # Extract query param
        directory = '/'
        query_components = parse_qs(urlparse(self.path).query)
        if 'dir' in query_components:
            directory = query_components["dir"][0]

        # Some custom HTML code, possibly generated by another function
        files = getFiles(directory)

        html = f"""<html><head><div><button id='backBTN' onclick='window.history.back();'><b><</b></button><h3 class='heading'><u>{directory}</u></h3></div>
        <input id='directory-search' class='searchbar' value='{directory}'></input>
        </head>
        <body><p>"""
        # display directory sidebar
        for i in range(len(files)):
            html += "<h4><a href='http://localhost:8080/?dir="+files[i]+"'>"+files[i]+"</a></h4>"
        if ("." in directory):
            # preview file
            html += "<div class='preview'>"+rf(directory)+"</div>"
        else:
            html += "<div class='preview'/>"

        html += "</p></body></html><style>"+rf("./NeonX/sys/explorer.css")+"</style><script>"+rf("./NeonX/sys/explorer.js")+"</script>"



        # Writing the HTML contents with UTF-8
        self.wfile.write(bytes(html, "utf8"))

        return

def getFiles(dir):
    # remove files from directory
    if ("." in dir):
        endDir = dir.rfind("/")
        dir = dir[:-(len(dir) - endDir)]

    dir = dir + "/*"
    return glob.glob(dir)

def rf(filename):
    return open(filename, "r").read()

# Create an object of the above class
handler_object = MyHttpRequestHandler

PORT = 8080
my_server = socketserver.TCPServer(("", PORT), handler_object)

# Star the server
print("Started File Server on :", PORT)
my_server.serve_forever()
